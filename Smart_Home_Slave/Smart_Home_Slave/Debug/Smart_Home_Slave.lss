
Smart_Home_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000908  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00000908  0000097c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001264  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e8  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ac3  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000527  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000867  00000000  00000000  0000386f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000040d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	a2 01       	movw	r20, r4
  56:	65 01       	movw	r12, r10
  58:	ef 01       	movw	r28, r30
  5a:	65 01       	movw	r12, r10
  5c:	65 01       	movw	r12, r10
  5e:	65 01       	movw	r12, r10
  60:	71 01       	movw	r14, r2
  62:	73 01       	movw	r14, r6
  64:	75 01       	movw	r14, r10
  66:	77 01       	movw	r14, r14
  68:	79 01       	movw	r14, r18
  6a:	7b 01       	movw	r14, r22
  6c:	7d 01       	movw	r14, r26
  6e:	65 01       	movw	r12, r10
  70:	65 01       	movw	r12, r10
  72:	65 01       	movw	r12, r10
  74:	65 01       	movw	r12, r10
  76:	65 01       	movw	r12, r10
  78:	65 01       	movw	r12, r10
  7a:	65 01       	movw	r12, r10
  7c:	65 01       	movw	r12, r10
  7e:	65 01       	movw	r12, r10
  80:	65 01       	movw	r12, r10
  82:	65 01       	movw	r12, r10
  84:	65 01       	movw	r12, r10
  86:	65 01       	movw	r12, r10
  88:	65 01       	movw	r12, r10
  8a:	65 01       	movw	r12, r10
  8c:	65 01       	movw	r12, r10
  8e:	65 01       	movw	r12, r10
  90:	65 01       	movw	r12, r10
  92:	65 01       	movw	r12, r10
  94:	65 01       	movw	r12, r10
  96:	65 01       	movw	r12, r10
  98:	65 01       	movw	r12, r10
  9a:	65 01       	movw	r12, r10
  9c:	65 01       	movw	r12, r10
  9e:	65 01       	movw	r12, r10
  a0:	65 01       	movw	r12, r10
  a2:	65 01       	movw	r12, r10
  a4:	65 01       	movw	r12, r10
  a6:	65 01       	movw	r12, r10
  a8:	65 01       	movw	r12, r10
  aa:	65 01       	movw	r12, r10
  ac:	65 01       	movw	r12, r10
  ae:	65 01       	movw	r12, r10
  b0:	65 01       	movw	r12, r10
  b2:	65 01       	movw	r12, r10
  b4:	65 01       	movw	r12, r10
  b6:	65 01       	movw	r12, r10
  b8:	65 01       	movw	r12, r10
  ba:	65 01       	movw	r12, r10
  bc:	65 01       	movw	r12, r10
  be:	65 01       	movw	r12, r10
  c0:	65 01       	movw	r12, r10
  c2:	65 01       	movw	r12, r10
  c4:	65 01       	movw	r12, r10
  c6:	65 01       	movw	r12, r10
  c8:	9c 01       	movw	r18, r24
  ca:	65 01       	movw	r12, r10
  cc:	65 01       	movw	r12, r10
  ce:	65 01       	movw	r12, r10
  d0:	65 01       	movw	r12, r10
  d2:	65 01       	movw	r12, r10
  d4:	65 01       	movw	r12, r10
  d6:	65 01       	movw	r12, r10
  d8:	65 01       	movw	r12, r10
  da:	65 01       	movw	r12, r10
  dc:	65 01       	movw	r12, r10
  de:	65 01       	movw	r12, r10
  e0:	65 01       	movw	r12, r10
  e2:	65 01       	movw	r12, r10
  e4:	8c 01       	movw	r16, r24

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf e5       	ldi	r28, 0x5F	; 95
  ec:	d8 e0       	ldi	r29, 0x08	; 8
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	a0 e6       	ldi	r26, 0x60	; 96
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e8 e0       	ldi	r30, 0x08	; 8
  fa:	f9 e0       	ldi	r31, 0x09	; 9
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
  fe:	05 90       	lpm	r0, Z+
 100:	0d 92       	st	X+, r0
 102:	aa 3a       	cpi	r26, 0xAA	; 170
 104:	b1 07       	cpc	r27, r17
 106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>
 108:	0e 94 45 01 	call	0x28a	; 0x28a <main>
 10c:	0c 94 82 04 	jmp	0x904	; 0x904 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <ADC_Init>:

#include "ADC.h"

void ADC_Init()
{
	ADMUX |= (1<<REFS1) | (1<<REFS0);                         // INTERNAL REF VOLTAGE
 114:	87 b1       	in	r24, 0x07	; 7
 116:	80 6c       	ori	r24, 0xC0	; 192
 118:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN) | (ADPS0) | (1<<ADPS1) | (1<<ADPS2);  //ENABLE ADC AND 128 PRESCALE
 11a:	86 b1       	in	r24, 0x06	; 6
 11c:	86 68       	ori	r24, 0x86	; 134
 11e:	86 b9       	out	0x06, r24	; 6
 120:	08 95       	ret

00000122 <ADC_Read>:
}

unsigned short ADC_Read(unsigned char Channel)
{
	unsigned short data = 0;
	ADMUX = (ADMUX & 0xE0) | (Channel & 0x1F);
 122:	97 b1       	in	r25, 0x07	; 7
 124:	90 7e       	andi	r25, 0xE0	; 224
 126:	8f 71       	andi	r24, 0x1F	; 31
 128:	89 2b       	or	r24, r25
 12a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);                              //START CONVERSION
 12c:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));                     //WAIT 25 OR 13 ADC CYCLE
 12e:	34 9b       	sbis	0x06, 4	; 6
 130:	fe cf       	rjmp	.-4      	; 0x12e <ADC_Read+0xc>
	ADCSRA |= (1<<ADIF);         //CLEAR ADIF BIT
 132:	34 9a       	sbi	0x06, 4	; 6
	
	data = ADCL;
 134:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);         //READ DATA
 136:	25 b1       	in	r18, 0x05	; 5
	
	return data;
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	92 2b       	or	r25, r18
 13c:	08 95       	ret

0000013e <LCD_Command>:
#include "LCD.h"

void LCD_Command(uint8 cmd)
{
	/* SEND HIGH NIBBLE TO (D4-D7) */
	LCD_PRT = (LCD_PRT & 0x0F) | (cmd & 0xF0);
 13e:	92 b3       	in	r25, 0x12	; 18
 140:	9f 70       	andi	r25, 0x0F	; 15
 142:	28 2f       	mov	r18, r24
 144:	20 7f       	andi	r18, 0xF0	; 240
 146:	92 2b       	or	r25, r18
 148:	92 bb       	out	0x12, r25	; 18
	LCD_PRT &=~ (1<<LCD_RS);
 14a:	92 98       	cbi	0x12, 2	; 18
	LCD_PRT |= (1<<LCD_EN);
 14c:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	35 e0       	ldi	r19, 0x05	; 5
 150:	3a 95       	dec	r19
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Command+0x12>
 154:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 156:	93 98       	cbi	0x12, 3	; 18
 158:	ef e8       	ldi	r30, 0x8F	; 143
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_Command+0x1e>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_Command+0x24>
 162:	00 00       	nop
	_delay_us(100);
	
	/* SEND LOW NIBBLE TO (D4-D7) */
	LCD_PRT = (LCD_PRT & 0x0F) | (cmd<<4);
 164:	22 b3       	in	r18, 0x12	; 18
 166:	2f 70       	andi	r18, 0x0F	; 15
 168:	f0 e1       	ldi	r31, 0x10	; 16
 16a:	8f 9f       	mul	r24, r31
 16c:	c0 01       	movw	r24, r0
 16e:	11 24       	eor	r1, r1
 170:	82 2b       	or	r24, r18
 172:	82 bb       	out	0x12, r24	; 18
	LCD_PRT |= (1<<LCD_EN);
 174:	93 9a       	sbi	0x12, 3	; 18
 176:	35 e0       	ldi	r19, 0x05	; 5
 178:	3a 95       	dec	r19
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Command+0x3a>
 17c:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 17e:	93 98       	cbi	0x12, 3	; 18
 180:	8f e8       	ldi	r24, 0x8F	; 143
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_Command+0x46>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_Command+0x4c>
 18a:	00 00       	nop
 18c:	08 95       	ret

0000018e <LCD_Init>:
	_delay_us(100);
}

void LCD_Init()
{
	LCD_DDR |= (1<<LCD_RS) | (1<<LCD_EN);
 18e:	81 b3       	in	r24, 0x11	; 17
 190:	8c 60       	ori	r24, 0x0C	; 12
 192:	81 bb       	out	0x11, r24	; 17
	LCD_DDR |= 0xF0;
 194:	81 b3       	in	r24, 0x11	; 17
 196:	80 6f       	ori	r24, 0xF0	; 240
 198:	81 bb       	out	0x11, r24	; 17
	LCD_PRT &=~ (1<<LCD_EN);
 19a:	93 98       	cbi	0x12, 3	; 18
 19c:	8f e3       	ldi	r24, 0x3F	; 63
 19e:	9f e1       	ldi	r25, 0x1F	; 31
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Init+0x12>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_Init+0x18>
 1a6:	00 00       	nop
	_delay_us(2000);
	LCD_Command(FOUR_BIT_MODE);			          //Init command
 1a8:	82 e3       	ldi	r24, 0x32	; 50
 1aa:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Command>
	LCD_Command(TWO_LINE_LCD_FOUR_BIT_MODE);      //Init LCD. 2 line, 5 x 7 matrix 4 bit mode (D4-D7)
 1ae:	88 e2       	ldi	r24, 0x28	; 40
 1b0:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Command>
	LCD_Command(CURSOR_BLINKING_OFF);             //Display on, Cursor off
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
 1b6:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Command>
	LCD_Command(CLEAR);                           //Clear LCD
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Command>
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	9f e1       	ldi	r25, 0x1F	; 31
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_Init+0x36>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_Init+0x3c>
 1ca:	00 00       	nop
 1cc:	08 95       	ret

000001ce <LCD_DisplayChar>:
}

void LCD_DisplayChar(uint8 data)
{
	//Send high nibble to (D4-D7)
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
 1ce:	92 b3       	in	r25, 0x12	; 18
 1d0:	9f 70       	andi	r25, 0x0F	; 15
 1d2:	28 2f       	mov	r18, r24
 1d4:	20 7f       	andi	r18, 0xF0	; 240
 1d6:	92 2b       	or	r25, r18
 1d8:	92 bb       	out	0x12, r25	; 18
	LCD_PRT |= (1<<LCD_RS);
 1da:	92 9a       	sbi	0x12, 2	; 18
	LCD_PRT |= (1<<LCD_EN);
 1dc:	93 9a       	sbi	0x12, 3	; 18
 1de:	35 e0       	ldi	r19, 0x05	; 5
 1e0:	3a 95       	dec	r19
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_DisplayChar+0x12>
 1e4:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 1e6:	93 98       	cbi	0x12, 3	; 18
 1e8:	ef e8       	ldi	r30, 0x8F	; 143
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_DisplayChar+0x1e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_DisplayChar+0x24>
 1f2:	00 00       	nop
	_delay_us(100);
	
	//Send low nibble to (D4-D7)
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
 1f4:	22 b3       	in	r18, 0x12	; 18
 1f6:	2f 70       	andi	r18, 0x0F	; 15
 1f8:	f0 e1       	ldi	r31, 0x10	; 16
 1fa:	8f 9f       	mul	r24, r31
 1fc:	c0 01       	movw	r24, r0
 1fe:	11 24       	eor	r1, r1
 200:	82 2b       	or	r24, r18
 202:	82 bb       	out	0x12, r24	; 18
	LCD_PRT |= (1<<LCD_EN);
 204:	93 9a       	sbi	0x12, 3	; 18
 206:	35 e0       	ldi	r19, 0x05	; 5
 208:	3a 95       	dec	r19
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_DisplayChar+0x3a>
 20c:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 20e:	93 98       	cbi	0x12, 3	; 18
 210:	8f e8       	ldi	r24, 0x8F	; 143
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <LCD_DisplayChar+0x46>
 218:	00 c0       	rjmp	.+0      	; 0x21a <LCD_DisplayChar+0x4c>
 21a:	00 00       	nop
 21c:	08 95       	ret

0000021e <LCD_DisplayString>:
	_delay_us(100);
}

void LCD_DisplayString(sint8 *str)
{
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	fc 01       	movw	r30, r24
	uint8 i=0;
	
	while(str[i] != 0)
 226:	80 81       	ld	r24, Z
 228:	88 23       	and	r24, r24
 22a:	59 f0       	breq	.+22     	; 0x242 <LCD_DisplayString+0x24>
 22c:	8f 01       	movw	r16, r30
 22e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_DisplayChar(str[i]);
 230:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_DisplayChar>
		i++;
 234:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_DisplayString(sint8 *str)
{
	uint8 i=0;
	
	while(str[i] != 0)
 236:	f8 01       	movw	r30, r16
 238:	ec 0f       	add	r30, r28
 23a:	f1 1d       	adc	r31, r1
 23c:	80 81       	ld	r24, Z
 23e:	81 11       	cpse	r24, r1
 240:	f7 cf       	rjmp	.-18     	; 0x230 <LCD_DisplayString+0x12>
	{
		LCD_DisplayChar(str[i]);
		i++;
	}
}
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	08 95       	ret

0000024a <LCD_Gotoxy>:

void LCD_Gotoxy(uint8 x, uint8 y)
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	00 d0       	rcall	.+0      	; 0x250 <LCD_Gotoxy+0x6>
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
	uint8 firstCharAdd[] = {0x80,0xC0};
 254:	90 e8       	ldi	r25, 0x80	; 128
 256:	99 83       	std	Y+1, r25	; 0x01
 258:	90 ec       	ldi	r25, 0xC0	; 192
 25a:	9a 83       	std	Y+2, r25	; 0x02
	LCD_Command(firstCharAdd[y-1] + x-1);
 25c:	fe 01       	movw	r30, r28
 25e:	e6 0f       	add	r30, r22
 260:	f1 1d       	adc	r31, r1
 262:	81 50       	subi	r24, 0x01	; 1
 264:	90 81       	ld	r25, Z
 266:	89 0f       	add	r24, r25
 268:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Command>
 26c:	8f e8       	ldi	r24, 0x8F	; 143
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <LCD_Gotoxy+0x26>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_Gotoxy+0x2c>
 276:	00 00       	nop
	_delay_us(100);
}
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command(CLEAR);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Command>
 288:	08 95       	ret

0000028a <main>:
#include "ADC.h"
#include "SSegments.h"

int main(void)
{
	LCD_Init();
 28a:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Init>
	SPI_Init('S');
 28e:	83 e5       	ldi	r24, 0x53	; 83
 290:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_Init>
	ADC_Init();
 294:	0e 94 8a 00 	call	0x114	; 0x114 <ADC_Init>
	SSEG_Init();
 298:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <SSEG_Init>
	
	DDRC |= (1<<5) | (1<<6) | (1<<7);    
 29c:	84 b3       	in	r24, 0x14	; 20
 29e:	80 6e       	ori	r24, 0xE0	; 224
 2a0:	84 bb       	out	0x14, r24	; 20
	DDRB |= (1<<0) | (1<<1);
 2a2:	87 b3       	in	r24, 0x17	; 23
 2a4:	83 60       	ori	r24, 0x03	; 3
 2a6:	87 bb       	out	0x17, r24	; 23
	
	TCCR0 |=(1<<WGM00)|(1<<CS00)|(1<<CS01)|(1<<COM01);    //phase correct mode, non-inverting, N=64
 2a8:	83 b7       	in	r24, 0x33	; 51
 2aa:	83 66       	ori	r24, 0x63	; 99
 2ac:	83 bf       	out	0x33, r24	; 51
	
	unsigned char motorFlag=0, slaveRequest, count=0;
 2ae:	c0 e0       	ldi	r28, 0x00	; 0
 2b0:	d0 e0       	ldi	r29, 0x00	; 0
						LCD_Clear();
						LCD_Gotoxy(1,1);
						LCD_DisplayString(" Speed x25");
						break;
						case 2:
						OCR0 = 127;
 2b2:	0f 2e       	mov	r0, r31
 2b4:	ff e7       	ldi	r31, 0x7F	; 127
 2b6:	df 2e       	mov	r13, r31
 2b8:	f0 2d       	mov	r31, r0
						LCD_Clear();
						LCD_Gotoxy(1,1);
						LCD_DisplayString(" Speed x50");
						break;
						case 3:
						OCR0 = 191;
 2ba:	0f 2e       	mov	r0, r31
 2bc:	ff eb       	ldi	r31, 0xBF	; 191
 2be:	ef 2e       	mov	r14, r31
 2c0:	f0 2d       	mov	r31, r0
						LCD_Clear();
						LCD_Gotoxy(1,1);
						LCD_DisplayString(" Speed x75");
						break;
						case 4:
						OCR0 = 255;
 2c2:	ff 24       	eor	r15, r15
 2c4:	fa 94       	dec	r15
						LCD_Clear();
						LCD_Gotoxy(1,1);
						LCD_DisplayString(" Speed = 0");
						break;
						case 1:
						OCR0 = 63;
 2c6:	0f e3       	ldi	r16, 0x3F	; 63
			break;
			case 'e':
			OCR0 = 0;
			PORTB &=~ (1<<0);
			PORTB &=~ (1<<1);
			motorFlag = 0;
 2c8:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char motorFlag=0, slaveRequest, count=0;
	unsigned short tempValue;
	
	while (1)
	{
		slaveRequest = SPI_Receive();
 2ca:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SPI_Receive>
		
		switch(slaveRequest)
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	fc 01       	movw	r30, r24
 2d2:	bb 97       	sbiw	r30, 0x2b	; 43
 2d4:	e9 34       	cpi	r30, 0x49	; 73
 2d6:	f1 05       	cpc	r31, r1
 2d8:	c0 f7       	brcc	.-16     	; 0x2ca <main+0x40>
 2da:	e6 5d       	subi	r30, 0xD6	; 214
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__tablejump2__>
		{
			case '1':
			PORTC |= (1<<5);
 2e2:	ad 9a       	sbi	0x15, 5	; 21
			break;
 2e4:	f2 cf       	rjmp	.-28     	; 0x2ca <main+0x40>
			case '2':
			PORTC &=~ (1<<5);
 2e6:	ad 98       	cbi	0x15, 5	; 21
			break;
 2e8:	f0 cf       	rjmp	.-32     	; 0x2ca <main+0x40>
			case '3':
			PORTC |= (1<<6);
 2ea:	ae 9a       	sbi	0x15, 6	; 21
			break;
 2ec:	ee cf       	rjmp	.-36     	; 0x2ca <main+0x40>
			case '4':
			PORTC &=~ (1<<6);
 2ee:	ae 98       	cbi	0x15, 6	; 21
			break;
 2f0:	ec cf       	rjmp	.-40     	; 0x2ca <main+0x40>
			case '5':
			PORTC |= (1<<7);
 2f2:	af 9a       	sbi	0x15, 7	; 21
			break;
 2f4:	ea cf       	rjmp	.-44     	; 0x2ca <main+0x40>
			case '6':
			PORTC &=~ (1<<7);
 2f6:	af 98       	cbi	0x15, 7	; 21
			break;
 2f8:	e8 cf       	rjmp	.-48     	; 0x2ca <main+0x40>
			case '7':
			while(slaveRequest == '7')
			{
	             tempValue = ADC_Read(3);
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	0e 94 91 00 	call	0x122	; 0x122 <ADC_Read>
	             tempValue /= 4;
	             SSEG_display(tempValue);
 300:	96 95       	lsr	r25
 302:	87 95       	ror	r24
 304:	96 95       	lsr	r25
 306:	87 95       	ror	r24
 308:	bc 01       	movw	r22, r24
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 c6 03 	call	0x78c	; 0x78c <__floatunsisf>
 312:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SSEG_display>
 316:	f1 cf       	rjmp	.-30     	; 0x2fa <main+0x70>
			}
			break;
			case 's':
			OCR0 = 0;
 318:	1c be       	out	0x3c, r1	; 60
			PORTB |= (1<<1);
 31a:	c1 9a       	sbi	0x18, 1	; 24
			PORTB &=~ (1<<0);
 31c:	c0 98       	cbi	0x18, 0	; 24
			LCD_Clear();
 31e:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
			LCD_Gotoxy(1,1);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
			LCD_DisplayString(" Speed = 0");
 32a:	80 e6       	ldi	r24, 0x60	; 96
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
			motorFlag = 1;
			count = 0;
 332:	c0 e0       	ldi	r28, 0x00	; 0
			PORTB |= (1<<1);
			PORTB &=~ (1<<0);
			LCD_Clear();
			LCD_Gotoxy(1,1);
			LCD_DisplayString(" Speed = 0");
			motorFlag = 1;
 334:	d1 e0       	ldi	r29, 0x01	; 1
			count = 0;
			break;
 336:	c9 cf       	rjmp	.-110    	; 0x2ca <main+0x40>
			case 'e':
			OCR0 = 0;
 338:	1c be       	out	0x3c, r1	; 60
			PORTB &=~ (1<<0);
 33a:	c0 98       	cbi	0x18, 0	; 24
			PORTB &=~ (1<<1);
 33c:	c1 98       	cbi	0x18, 1	; 24
			motorFlag = 0;
			count = 0;
 33e:	c0 e0       	ldi	r28, 0x00	; 0
			break;
			case 'e':
			OCR0 = 0;
			PORTB &=~ (1<<0);
			PORTB &=~ (1<<1);
			motorFlag = 0;
 340:	d1 2f       	mov	r29, r17
			count = 0;
			break;
 342:	c3 cf       	rjmp	.-122    	; 0x2ca <main+0x40>
			case '+':
			if(motorFlag == 0)
 344:	d1 11       	cpse	r29, r1
 346:	0b c0       	rjmp	.+22     	; 0x35e <main+0xd4>
			{
				LCD_Clear();
 348:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
				LCD_Gotoxy(1,1);
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
				LCD_DisplayString(" Turn ON motor!!");
 354:	8b e6       	ldi	r24, 0x6B	; 107
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
 35c:	b6 cf       	rjmp	.-148    	; 0x2ca <main+0x40>
			}
			else
			{
				count++;
 35e:	cf 5f       	subi	r28, 0xFF	; 255
				switch(count)
 360:	c2 30       	cpi	r28, 0x02	; 2
 362:	a9 f0       	breq	.+42     	; 0x38e <main+0x104>
 364:	18 f4       	brcc	.+6      	; 0x36c <main+0xe2>
 366:	c1 30       	cpi	r28, 0x01	; 1
 368:	31 f0       	breq	.+12     	; 0x376 <main+0xec>
 36a:	34 c0       	rjmp	.+104    	; 0x3d4 <main+0x14a>
 36c:	c3 30       	cpi	r28, 0x03	; 3
 36e:	d9 f0       	breq	.+54     	; 0x3a6 <main+0x11c>
 370:	c4 30       	cpi	r28, 0x04	; 4
 372:	29 f1       	breq	.+74     	; 0x3be <main+0x134>
 374:	2f c0       	rjmp	.+94     	; 0x3d4 <main+0x14a>
				{
					case 1:
					OCR0 = 63;
 376:	0c bf       	out	0x3c, r16	; 60
					LCD_Clear();
 378:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
					LCD_Gotoxy(1,1);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
					LCD_DisplayString(" Speed x25");
 384:	8c e7       	ldi	r24, 0x7C	; 124
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
					break;
 38c:	23 c0       	rjmp	.+70     	; 0x3d4 <main+0x14a>
					case 2:
					OCR0 = 127;
 38e:	dc be       	out	0x3c, r13	; 60
					LCD_Clear();
 390:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
					LCD_Gotoxy(1,1);
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
					LCD_DisplayString(" Speed x50");
 39c:	87 e8       	ldi	r24, 0x87	; 135
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
					break;
 3a4:	17 c0       	rjmp	.+46     	; 0x3d4 <main+0x14a>
					case 3:
					OCR0 = 191;
 3a6:	ec be       	out	0x3c, r14	; 60
					LCD_Clear();
 3a8:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
					LCD_Gotoxy(1,1);
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
					LCD_DisplayString(" Speed x75");
 3b4:	82 e9       	ldi	r24, 0x92	; 146
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
					break;
 3bc:	0b c0       	rjmp	.+22     	; 0x3d4 <main+0x14a>
					case 4:
					OCR0 = 255;
 3be:	fc be       	out	0x3c, r15	; 60
					LCD_Clear();
 3c0:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
					LCD_Gotoxy(1,1);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
					LCD_DisplayString(" Speed x100");
 3cc:	8d e9       	ldi	r24, 0x9D	; 157
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
 3d4:	c5 30       	cpi	r28, 0x05	; 5
 3d6:	08 f4       	brcc	.+2      	; 0x3da <main+0x150>
 3d8:	78 cf       	rjmp	.-272    	; 0x2ca <main+0x40>
 3da:	c4 e0       	ldi	r28, 0x04	; 4
 3dc:	76 cf       	rjmp	.-276    	; 0x2ca <main+0x40>
				{
					count=4;
				}
				break;
				case '-':
				if(motorFlag == 0)
 3de:	d1 11       	cpse	r29, r1
 3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <main+0x16e>
				{
					LCD_Clear();
 3e2:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
					LCD_Gotoxy(1,1);
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
					LCD_DisplayString(" Turn ON motor!!");
 3ee:	8b e6       	ldi	r24, 0x6B	; 107
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
 3f6:	69 cf       	rjmp	.-302    	; 0x2ca <main+0x40>
				}
				else
				{
					count--;
 3f8:	c1 50       	subi	r28, 0x01	; 1
					switch(count)
 3fa:	c2 30       	cpi	r28, 0x02	; 2
 3fc:	19 f1       	breq	.+70     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3fe:	28 f4       	brcc	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 400:	cc 23       	and	r28, r28
 402:	41 f0       	breq	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 404:	c1 30       	cpi	r28, 0x01	; 1
 406:	91 f0       	breq	.+36     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 408:	60 cf       	rjmp	.-320    	; 0x2ca <main+0x40>
 40a:	c3 30       	cpi	r28, 0x03	; 3
 40c:	39 f1       	breq	.+78     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 40e:	c4 30       	cpi	r28, 0x04	; 4
 410:	89 f1       	breq	.+98     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 412:	5b cf       	rjmp	.-330    	; 0x2ca <main+0x40>
					{
						case 0:
						OCR0 = 0;
 414:	1c be       	out	0x3c, r1	; 60
						LCD_Clear();
 416:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
						LCD_Gotoxy(1,1);
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
						LCD_DisplayString(" Speed = 0");
 422:	80 e6       	ldi	r24, 0x60	; 96
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
						break;
 42a:	4f cf       	rjmp	.-354    	; 0x2ca <main+0x40>
						case 1:
						OCR0 = 63;
 42c:	0c bf       	out	0x3c, r16	; 60
						LCD_Clear();
 42e:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
						LCD_Gotoxy(1,1);
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
						LCD_DisplayString(" Speed x25");
 43a:	8c e7       	ldi	r24, 0x7C	; 124
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
						break;
 442:	43 cf       	rjmp	.-378    	; 0x2ca <main+0x40>
						case 2:
						OCR0 = 127;
 444:	dc be       	out	0x3c, r13	; 60
						LCD_Clear();
 446:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
						LCD_Gotoxy(1,1);
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
						LCD_DisplayString(" Speed x50");
 452:	87 e8       	ldi	r24, 0x87	; 135
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
						break;
 45a:	37 cf       	rjmp	.-402    	; 0x2ca <main+0x40>
						case 3:
						OCR0 = 191;
 45c:	ec be       	out	0x3c, r14	; 60
						LCD_Clear();
 45e:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
						LCD_Gotoxy(1,1);
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
						LCD_DisplayString(" Speed x75");
 46a:	82 e9       	ldi	r24, 0x92	; 146
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
						break;
 472:	2b cf       	rjmp	.-426    	; 0x2ca <main+0x40>
						case 4:
						OCR0 = 255;
 474:	fc be       	out	0x3c, r15	; 60
						LCD_Clear();
 476:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Clear>
						LCD_Gotoxy(1,1);
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Gotoxy>
						LCD_DisplayString(" Speed x100");
 482:	8d e9       	ldi	r24, 0x9D	; 157
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_DisplayString>
						break;
 48a:	1f cf       	rjmp	.-450    	; 0x2ca <main+0x40>

0000048c <SPI_Init>:
unsigned char SPI_TxRx(unsigned char data)
{
	SPDR = data;
	while(!(SPSR & (1<<SPIF)));   //waiting for reading data
	return SPDR;	
}
 48c:	8d 34       	cpi	r24, 0x4D	; 77
 48e:	19 f0       	breq	.+6      	; 0x496 <SPI_Init+0xa>
 490:	83 35       	cpi	r24, 0x53	; 83
 492:	51 f0       	breq	.+20     	; 0x4a8 <SPI_Init+0x1c>
 494:	08 95       	ret
 496:	87 b3       	in	r24, 0x17	; 23
 498:	80 6b       	ori	r24, 0xB0	; 176
 49a:	87 bb       	out	0x17, r24	; 23
 49c:	be 98       	cbi	0x17, 6	; 23
 49e:	8d b1       	in	r24, 0x0d	; 13
 4a0:	80 65       	ori	r24, 0x50	; 80
 4a2:	8d b9       	out	0x0d, r24	; 13
 4a4:	c4 9a       	sbi	0x18, 4	; 24
 4a6:	08 95       	ret
 4a8:	bd 98       	cbi	0x17, 5	; 23
 4aa:	be 9a       	sbi	0x17, 6	; 23
 4ac:	6e 9a       	sbi	0x0d, 6	; 13
 4ae:	08 95       	ret

000004b0 <SPI_Receive>:

unsigned char SPI_Receive()			    /* SPI Receive data function */
{
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
 4b0:	77 9b       	sbis	0x0e, 7	; 14
 4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <SPI_Receive>
	return(SPDR);			    /* Return received data */
 4b4:	8f b1       	in	r24, 0x0f	; 15
 4b6:	08 95       	ret

000004b8 <SSEG_Init>:

#include "SSegments.h"

void SSEG_Init()
{
	DDRC |= (1<<0) | (1<<1) | (1<<2) | (1<<3);
 4b8:	84 b3       	in	r24, 0x14	; 20
 4ba:	8f 60       	ori	r24, 0x0F	; 15
 4bc:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<1) | (1<<2);
 4be:	8a b3       	in	r24, 0x1a	; 26
 4c0:	86 60       	ori	r24, 0x06	; 6
 4c2:	8a bb       	out	0x1a, r24	; 26
 4c4:	08 95       	ret

000004c6 <SSEG_display>:
}

void SSEG_display(float dist)
{
 4c6:	cf 92       	push	r12
 4c8:	df 92       	push	r13
 4ca:	ef 92       	push	r14
 4cc:	ff 92       	push	r15
 4ce:	0f 93       	push	r16
 4d0:	1f 93       	push	r17
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	6b 01       	movw	r12, r22
 4d8:	7c 01       	movw	r14, r24
	unsigned char d1, d2;
	
	d1 = (int)dist % 10;     dist = (dist - d1 ) / 10;  
 4da:	0e 94 90 03 	call	0x720	; 0x720 <__fixsfsi>
 4de:	0a e0       	ldi	r16, 0x0A	; 10
 4e0:	10 e0       	ldi	r17, 0x00	; 0
 4e2:	cb 01       	movw	r24, r22
 4e4:	b8 01       	movw	r22, r16
 4e6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divmodhi4>
 4ea:	ec 01       	movw	r28, r24
 4ec:	bc 01       	movw	r22, r24
 4ee:	77 27       	eor	r23, r23
 4f0:	07 2e       	mov	r0, r23
 4f2:	00 0c       	add	r0, r0
 4f4:	88 0b       	sbc	r24, r24
 4f6:	99 0b       	sbc	r25, r25
 4f8:	0e 94 c8 03 	call	0x790	; 0x790 <__floatsisf>
 4fc:	9b 01       	movw	r18, r22
 4fe:	ac 01       	movw	r20, r24
 500:	c7 01       	movw	r24, r14
 502:	b6 01       	movw	r22, r12
 504:	0e 94 b1 02 	call	0x562	; 0x562 <__subsf3>
	
	PORTC = (PORTC & 0xF0) | d1;
 508:	25 b3       	in	r18, 0x15	; 21
 50a:	20 7f       	andi	r18, 0xF0	; 240
 50c:	c2 2b       	or	r28, r18
 50e:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<2);
 510:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 512:	ef e1       	ldi	r30, 0x1F	; 31
 514:	fe e4       	ldi	r31, 0x4E	; 78
 516:	31 97       	sbiw	r30, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <SSEG_display+0x50>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <SSEG_display+0x56>
 51c:	00 00       	nop
	_delay_ms(5);
	PORTA &= (~(1<<2));
 51e:	da 98       	cbi	0x1b, 2	; 27
	
	d2 = (int)dist % 10;     dist = (dist - d2 ) / 10;
	
	PORTC = (PORTC & 0xF0) | d2;
 520:	c5 b3       	in	r28, 0x15	; 21
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	40 e2       	ldi	r20, 0x20	; 32
 528:	51 e4       	ldi	r21, 0x41	; 65
 52a:	0e 94 1e 03 	call	0x63c	; 0x63c <__divsf3>
 52e:	0e 94 90 03 	call	0x720	; 0x720 <__fixsfsi>
 532:	cb 01       	movw	r24, r22
 534:	b8 01       	movw	r22, r16
 536:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divmodhi4>
 53a:	c0 7f       	andi	r28, 0xF0	; 240
 53c:	8c 2b       	or	r24, r28
 53e:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<1);
 540:	d9 9a       	sbi	0x1b, 1	; 27
 542:	8f e1       	ldi	r24, 0x1F	; 31
 544:	9e e4       	ldi	r25, 0x4E	; 78
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <SSEG_display+0x80>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <SSEG_display+0x86>
 54c:	00 00       	nop
	_delay_ms(5);
	PORTA &= (~(1<<1));
 54e:	d9 98       	cbi	0x1b, 1	; 27
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	08 95       	ret

00000562 <__subsf3>:
 562:	50 58       	subi	r21, 0x80	; 128

00000564 <__addsf3>:
 564:	bb 27       	eor	r27, r27
 566:	aa 27       	eor	r26, r26
 568:	0e 94 c9 02 	call	0x592	; 0x592 <__addsf3x>
 56c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_round>
 570:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_pscA>
 574:	38 f0       	brcs	.+14     	; 0x584 <__addsf3+0x20>
 576:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscB>
 57a:	20 f0       	brcs	.+8      	; 0x584 <__addsf3+0x20>
 57c:	39 f4       	brne	.+14     	; 0x58c <__addsf3+0x28>
 57e:	9f 3f       	cpi	r25, 0xFF	; 255
 580:	19 f4       	brne	.+6      	; 0x588 <__addsf3+0x24>
 582:	26 f4       	brtc	.+8      	; 0x58c <__addsf3+0x28>
 584:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_nan>
 588:	0e f4       	brtc	.+2      	; 0x58c <__addsf3+0x28>
 58a:	e0 95       	com	r30
 58c:	e7 fb       	bst	r30, 7
 58e:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>

00000592 <__addsf3x>:
 592:	e9 2f       	mov	r30, r25
 594:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_split3>
 598:	58 f3       	brcs	.-42     	; 0x570 <__addsf3+0xc>
 59a:	ba 17       	cp	r27, r26
 59c:	62 07       	cpc	r22, r18
 59e:	73 07       	cpc	r23, r19
 5a0:	84 07       	cpc	r24, r20
 5a2:	95 07       	cpc	r25, r21
 5a4:	20 f0       	brcs	.+8      	; 0x5ae <__addsf3x+0x1c>
 5a6:	79 f4       	brne	.+30     	; 0x5c6 <__addsf3x+0x34>
 5a8:	a6 f5       	brtc	.+104    	; 0x612 <__addsf3x+0x80>
 5aa:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__fp_zero>
 5ae:	0e f4       	brtc	.+2      	; 0x5b2 <__addsf3x+0x20>
 5b0:	e0 95       	com	r30
 5b2:	0b 2e       	mov	r0, r27
 5b4:	ba 2f       	mov	r27, r26
 5b6:	a0 2d       	mov	r26, r0
 5b8:	0b 01       	movw	r0, r22
 5ba:	b9 01       	movw	r22, r18
 5bc:	90 01       	movw	r18, r0
 5be:	0c 01       	movw	r0, r24
 5c0:	ca 01       	movw	r24, r20
 5c2:	a0 01       	movw	r20, r0
 5c4:	11 24       	eor	r1, r1
 5c6:	ff 27       	eor	r31, r31
 5c8:	59 1b       	sub	r21, r25
 5ca:	99 f0       	breq	.+38     	; 0x5f2 <__addsf3x+0x60>
 5cc:	59 3f       	cpi	r21, 0xF9	; 249
 5ce:	50 f4       	brcc	.+20     	; 0x5e4 <__addsf3x+0x52>
 5d0:	50 3e       	cpi	r21, 0xE0	; 224
 5d2:	68 f1       	brcs	.+90     	; 0x62e <__addsf3x+0x9c>
 5d4:	1a 16       	cp	r1, r26
 5d6:	f0 40       	sbci	r31, 0x00	; 0
 5d8:	a2 2f       	mov	r26, r18
 5da:	23 2f       	mov	r18, r19
 5dc:	34 2f       	mov	r19, r20
 5de:	44 27       	eor	r20, r20
 5e0:	58 5f       	subi	r21, 0xF8	; 248
 5e2:	f3 cf       	rjmp	.-26     	; 0x5ca <__addsf3x+0x38>
 5e4:	46 95       	lsr	r20
 5e6:	37 95       	ror	r19
 5e8:	27 95       	ror	r18
 5ea:	a7 95       	ror	r26
 5ec:	f0 40       	sbci	r31, 0x00	; 0
 5ee:	53 95       	inc	r21
 5f0:	c9 f7       	brne	.-14     	; 0x5e4 <__addsf3x+0x52>
 5f2:	7e f4       	brtc	.+30     	; 0x612 <__addsf3x+0x80>
 5f4:	1f 16       	cp	r1, r31
 5f6:	ba 0b       	sbc	r27, r26
 5f8:	62 0b       	sbc	r22, r18
 5fa:	73 0b       	sbc	r23, r19
 5fc:	84 0b       	sbc	r24, r20
 5fe:	ba f0       	brmi	.+46     	; 0x62e <__addsf3x+0x9c>
 600:	91 50       	subi	r25, 0x01	; 1
 602:	a1 f0       	breq	.+40     	; 0x62c <__addsf3x+0x9a>
 604:	ff 0f       	add	r31, r31
 606:	bb 1f       	adc	r27, r27
 608:	66 1f       	adc	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	c2 f7       	brpl	.-16     	; 0x600 <__addsf3x+0x6e>
 610:	0e c0       	rjmp	.+28     	; 0x62e <__addsf3x+0x9c>
 612:	ba 0f       	add	r27, r26
 614:	62 1f       	adc	r22, r18
 616:	73 1f       	adc	r23, r19
 618:	84 1f       	adc	r24, r20
 61a:	48 f4       	brcc	.+18     	; 0x62e <__addsf3x+0x9c>
 61c:	87 95       	ror	r24
 61e:	77 95       	ror	r23
 620:	67 95       	ror	r22
 622:	b7 95       	ror	r27
 624:	f7 95       	ror	r31
 626:	9e 3f       	cpi	r25, 0xFE	; 254
 628:	08 f0       	brcs	.+2      	; 0x62c <__addsf3x+0x9a>
 62a:	b0 cf       	rjmp	.-160    	; 0x58c <__addsf3+0x28>
 62c:	93 95       	inc	r25
 62e:	88 0f       	add	r24, r24
 630:	08 f0       	brcs	.+2      	; 0x634 <__addsf3x+0xa2>
 632:	99 27       	eor	r25, r25
 634:	ee 0f       	add	r30, r30
 636:	97 95       	ror	r25
 638:	87 95       	ror	r24
 63a:	08 95       	ret

0000063c <__divsf3>:
 63c:	0e 94 32 03 	call	0x664	; 0x664 <__divsf3x>
 640:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_round>
 644:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscB>
 648:	58 f0       	brcs	.+22     	; 0x660 <__divsf3+0x24>
 64a:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_pscA>
 64e:	40 f0       	brcs	.+16     	; 0x660 <__divsf3+0x24>
 650:	29 f4       	brne	.+10     	; 0x65c <__divsf3+0x20>
 652:	5f 3f       	cpi	r21, 0xFF	; 255
 654:	29 f0       	breq	.+10     	; 0x660 <__divsf3+0x24>
 656:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>
 65a:	51 11       	cpse	r21, r1
 65c:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_szero>
 660:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_nan>

00000664 <__divsf3x>:
 664:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_split3>
 668:	68 f3       	brcs	.-38     	; 0x644 <__divsf3+0x8>

0000066a <__divsf3_pse>:
 66a:	99 23       	and	r25, r25
 66c:	b1 f3       	breq	.-20     	; 0x65a <__divsf3+0x1e>
 66e:	55 23       	and	r21, r21
 670:	91 f3       	breq	.-28     	; 0x656 <__divsf3+0x1a>
 672:	95 1b       	sub	r25, r21
 674:	55 0b       	sbc	r21, r21
 676:	bb 27       	eor	r27, r27
 678:	aa 27       	eor	r26, r26
 67a:	62 17       	cp	r22, r18
 67c:	73 07       	cpc	r23, r19
 67e:	84 07       	cpc	r24, r20
 680:	38 f0       	brcs	.+14     	; 0x690 <__divsf3_pse+0x26>
 682:	9f 5f       	subi	r25, 0xFF	; 255
 684:	5f 4f       	sbci	r21, 0xFF	; 255
 686:	22 0f       	add	r18, r18
 688:	33 1f       	adc	r19, r19
 68a:	44 1f       	adc	r20, r20
 68c:	aa 1f       	adc	r26, r26
 68e:	a9 f3       	breq	.-22     	; 0x67a <__divsf3_pse+0x10>
 690:	35 d0       	rcall	.+106    	; 0x6fc <__divsf3_pse+0x92>
 692:	0e 2e       	mov	r0, r30
 694:	3a f0       	brmi	.+14     	; 0x6a4 <__divsf3_pse+0x3a>
 696:	e0 e8       	ldi	r30, 0x80	; 128
 698:	32 d0       	rcall	.+100    	; 0x6fe <__divsf3_pse+0x94>
 69a:	91 50       	subi	r25, 0x01	; 1
 69c:	50 40       	sbci	r21, 0x00	; 0
 69e:	e6 95       	lsr	r30
 6a0:	00 1c       	adc	r0, r0
 6a2:	ca f7       	brpl	.-14     	; 0x696 <__divsf3_pse+0x2c>
 6a4:	2b d0       	rcall	.+86     	; 0x6fc <__divsf3_pse+0x92>
 6a6:	fe 2f       	mov	r31, r30
 6a8:	29 d0       	rcall	.+82     	; 0x6fc <__divsf3_pse+0x92>
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	88 1f       	adc	r24, r24
 6b0:	bb 1f       	adc	r27, r27
 6b2:	26 17       	cp	r18, r22
 6b4:	37 07       	cpc	r19, r23
 6b6:	48 07       	cpc	r20, r24
 6b8:	ab 07       	cpc	r26, r27
 6ba:	b0 e8       	ldi	r27, 0x80	; 128
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <__divsf3_pse+0x56>
 6be:	bb 0b       	sbc	r27, r27
 6c0:	80 2d       	mov	r24, r0
 6c2:	bf 01       	movw	r22, r30
 6c4:	ff 27       	eor	r31, r31
 6c6:	93 58       	subi	r25, 0x83	; 131
 6c8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ca:	3a f0       	brmi	.+14     	; 0x6da <__divsf3_pse+0x70>
 6cc:	9e 3f       	cpi	r25, 0xFE	; 254
 6ce:	51 05       	cpc	r21, r1
 6d0:	78 f0       	brcs	.+30     	; 0x6f0 <__divsf3_pse+0x86>
 6d2:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>
 6d6:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_szero>
 6da:	5f 3f       	cpi	r21, 0xFF	; 255
 6dc:	e4 f3       	brlt	.-8      	; 0x6d6 <__divsf3_pse+0x6c>
 6de:	98 3e       	cpi	r25, 0xE8	; 232
 6e0:	d4 f3       	brlt	.-12     	; 0x6d6 <__divsf3_pse+0x6c>
 6e2:	86 95       	lsr	r24
 6e4:	77 95       	ror	r23
 6e6:	67 95       	ror	r22
 6e8:	b7 95       	ror	r27
 6ea:	f7 95       	ror	r31
 6ec:	9f 5f       	subi	r25, 0xFF	; 255
 6ee:	c9 f7       	brne	.-14     	; 0x6e2 <__divsf3_pse+0x78>
 6f0:	88 0f       	add	r24, r24
 6f2:	91 1d       	adc	r25, r1
 6f4:	96 95       	lsr	r25
 6f6:	87 95       	ror	r24
 6f8:	97 f9       	bld	r25, 7
 6fa:	08 95       	ret
 6fc:	e1 e0       	ldi	r30, 0x01	; 1
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	bb 1f       	adc	r27, r27
 706:	62 17       	cp	r22, r18
 708:	73 07       	cpc	r23, r19
 70a:	84 07       	cpc	r24, r20
 70c:	ba 07       	cpc	r27, r26
 70e:	20 f0       	brcs	.+8      	; 0x718 <__divsf3_pse+0xae>
 710:	62 1b       	sub	r22, r18
 712:	73 0b       	sbc	r23, r19
 714:	84 0b       	sbc	r24, r20
 716:	ba 0b       	sbc	r27, r26
 718:	ee 1f       	adc	r30, r30
 71a:	88 f7       	brcc	.-30     	; 0x6fe <__divsf3_pse+0x94>
 71c:	e0 95       	com	r30
 71e:	08 95       	ret

00000720 <__fixsfsi>:
 720:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
 724:	68 94       	set
 726:	b1 11       	cpse	r27, r1
 728:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_szero>
 72c:	08 95       	ret

0000072e <__fixunssfsi>:
 72e:	0e 94 33 04 	call	0x866	; 0x866 <__fp_splitA>
 732:	88 f0       	brcs	.+34     	; 0x756 <__fixunssfsi+0x28>
 734:	9f 57       	subi	r25, 0x7F	; 127
 736:	98 f0       	brcs	.+38     	; 0x75e <__fixunssfsi+0x30>
 738:	b9 2f       	mov	r27, r25
 73a:	99 27       	eor	r25, r25
 73c:	b7 51       	subi	r27, 0x17	; 23
 73e:	b0 f0       	brcs	.+44     	; 0x76c <__fixunssfsi+0x3e>
 740:	e1 f0       	breq	.+56     	; 0x77a <__fixunssfsi+0x4c>
 742:	66 0f       	add	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	1a f0       	brmi	.+6      	; 0x752 <__fixunssfsi+0x24>
 74c:	ba 95       	dec	r27
 74e:	c9 f7       	brne	.-14     	; 0x742 <__fixunssfsi+0x14>
 750:	14 c0       	rjmp	.+40     	; 0x77a <__fixunssfsi+0x4c>
 752:	b1 30       	cpi	r27, 0x01	; 1
 754:	91 f0       	breq	.+36     	; 0x77a <__fixunssfsi+0x4c>
 756:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_zero>
 75a:	b1 e0       	ldi	r27, 0x01	; 1
 75c:	08 95       	ret
 75e:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__fp_zero>
 762:	67 2f       	mov	r22, r23
 764:	78 2f       	mov	r23, r24
 766:	88 27       	eor	r24, r24
 768:	b8 5f       	subi	r27, 0xF8	; 248
 76a:	39 f0       	breq	.+14     	; 0x77a <__fixunssfsi+0x4c>
 76c:	b9 3f       	cpi	r27, 0xF9	; 249
 76e:	cc f3       	brlt	.-14     	; 0x762 <__fixunssfsi+0x34>
 770:	86 95       	lsr	r24
 772:	77 95       	ror	r23
 774:	67 95       	ror	r22
 776:	b3 95       	inc	r27
 778:	d9 f7       	brne	.-10     	; 0x770 <__fixunssfsi+0x42>
 77a:	3e f4       	brtc	.+14     	; 0x78a <__fixunssfsi+0x5c>
 77c:	90 95       	com	r25
 77e:	80 95       	com	r24
 780:	70 95       	com	r23
 782:	61 95       	neg	r22
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	08 95       	ret

0000078c <__floatunsisf>:
 78c:	e8 94       	clt
 78e:	09 c0       	rjmp	.+18     	; 0x7a2 <__floatsisf+0x12>

00000790 <__floatsisf>:
 790:	97 fb       	bst	r25, 7
 792:	3e f4       	brtc	.+14     	; 0x7a2 <__floatsisf+0x12>
 794:	90 95       	com	r25
 796:	80 95       	com	r24
 798:	70 95       	com	r23
 79a:	61 95       	neg	r22
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	99 23       	and	r25, r25
 7a4:	a9 f0       	breq	.+42     	; 0x7d0 <__floatsisf+0x40>
 7a6:	f9 2f       	mov	r31, r25
 7a8:	96 e9       	ldi	r25, 0x96	; 150
 7aa:	bb 27       	eor	r27, r27
 7ac:	93 95       	inc	r25
 7ae:	f6 95       	lsr	r31
 7b0:	87 95       	ror	r24
 7b2:	77 95       	ror	r23
 7b4:	67 95       	ror	r22
 7b6:	b7 95       	ror	r27
 7b8:	f1 11       	cpse	r31, r1
 7ba:	f8 cf       	rjmp	.-16     	; 0x7ac <__floatsisf+0x1c>
 7bc:	fa f4       	brpl	.+62     	; 0x7fc <__floatsisf+0x6c>
 7be:	bb 0f       	add	r27, r27
 7c0:	11 f4       	brne	.+4      	; 0x7c6 <__floatsisf+0x36>
 7c2:	60 ff       	sbrs	r22, 0
 7c4:	1b c0       	rjmp	.+54     	; 0x7fc <__floatsisf+0x6c>
 7c6:	6f 5f       	subi	r22, 0xFF	; 255
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ca:	8f 4f       	sbci	r24, 0xFF	; 255
 7cc:	9f 4f       	sbci	r25, 0xFF	; 255
 7ce:	16 c0       	rjmp	.+44     	; 0x7fc <__floatsisf+0x6c>
 7d0:	88 23       	and	r24, r24
 7d2:	11 f0       	breq	.+4      	; 0x7d8 <__floatsisf+0x48>
 7d4:	96 e9       	ldi	r25, 0x96	; 150
 7d6:	11 c0       	rjmp	.+34     	; 0x7fa <__floatsisf+0x6a>
 7d8:	77 23       	and	r23, r23
 7da:	21 f0       	breq	.+8      	; 0x7e4 <__floatsisf+0x54>
 7dc:	9e e8       	ldi	r25, 0x8E	; 142
 7de:	87 2f       	mov	r24, r23
 7e0:	76 2f       	mov	r23, r22
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <__floatsisf+0x5e>
 7e4:	66 23       	and	r22, r22
 7e6:	71 f0       	breq	.+28     	; 0x804 <__floatsisf+0x74>
 7e8:	96 e8       	ldi	r25, 0x86	; 134
 7ea:	86 2f       	mov	r24, r22
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	2a f0       	brmi	.+10     	; 0x7fc <__floatsisf+0x6c>
 7f2:	9a 95       	dec	r25
 7f4:	66 0f       	add	r22, r22
 7f6:	77 1f       	adc	r23, r23
 7f8:	88 1f       	adc	r24, r24
 7fa:	da f7       	brpl	.-10     	; 0x7f2 <__floatsisf+0x62>
 7fc:	88 0f       	add	r24, r24
 7fe:	96 95       	lsr	r25
 800:	87 95       	ror	r24
 802:	97 f9       	bld	r25, 7
 804:	08 95       	ret

00000806 <__fp_inf>:
 806:	97 f9       	bld	r25, 7
 808:	9f 67       	ori	r25, 0x7F	; 127
 80a:	80 e8       	ldi	r24, 0x80	; 128
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	08 95       	ret

00000812 <__fp_nan>:
 812:	9f ef       	ldi	r25, 0xFF	; 255
 814:	80 ec       	ldi	r24, 0xC0	; 192
 816:	08 95       	ret

00000818 <__fp_pscA>:
 818:	00 24       	eor	r0, r0
 81a:	0a 94       	dec	r0
 81c:	16 16       	cp	r1, r22
 81e:	17 06       	cpc	r1, r23
 820:	18 06       	cpc	r1, r24
 822:	09 06       	cpc	r0, r25
 824:	08 95       	ret

00000826 <__fp_pscB>:
 826:	00 24       	eor	r0, r0
 828:	0a 94       	dec	r0
 82a:	12 16       	cp	r1, r18
 82c:	13 06       	cpc	r1, r19
 82e:	14 06       	cpc	r1, r20
 830:	05 06       	cpc	r0, r21
 832:	08 95       	ret

00000834 <__fp_round>:
 834:	09 2e       	mov	r0, r25
 836:	03 94       	inc	r0
 838:	00 0c       	add	r0, r0
 83a:	11 f4       	brne	.+4      	; 0x840 <__fp_round+0xc>
 83c:	88 23       	and	r24, r24
 83e:	52 f0       	brmi	.+20     	; 0x854 <__fp_round+0x20>
 840:	bb 0f       	add	r27, r27
 842:	40 f4       	brcc	.+16     	; 0x854 <__fp_round+0x20>
 844:	bf 2b       	or	r27, r31
 846:	11 f4       	brne	.+4      	; 0x84c <__fp_round+0x18>
 848:	60 ff       	sbrs	r22, 0
 84a:	04 c0       	rjmp	.+8      	; 0x854 <__fp_round+0x20>
 84c:	6f 5f       	subi	r22, 0xFF	; 255
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	08 95       	ret

00000856 <__fp_split3>:
 856:	57 fd       	sbrc	r21, 7
 858:	90 58       	subi	r25, 0x80	; 128
 85a:	44 0f       	add	r20, r20
 85c:	55 1f       	adc	r21, r21
 85e:	59 f0       	breq	.+22     	; 0x876 <__fp_splitA+0x10>
 860:	5f 3f       	cpi	r21, 0xFF	; 255
 862:	71 f0       	breq	.+28     	; 0x880 <__fp_splitA+0x1a>
 864:	47 95       	ror	r20

00000866 <__fp_splitA>:
 866:	88 0f       	add	r24, r24
 868:	97 fb       	bst	r25, 7
 86a:	99 1f       	adc	r25, r25
 86c:	61 f0       	breq	.+24     	; 0x886 <__fp_splitA+0x20>
 86e:	9f 3f       	cpi	r25, 0xFF	; 255
 870:	79 f0       	breq	.+30     	; 0x890 <__fp_splitA+0x2a>
 872:	87 95       	ror	r24
 874:	08 95       	ret
 876:	12 16       	cp	r1, r18
 878:	13 06       	cpc	r1, r19
 87a:	14 06       	cpc	r1, r20
 87c:	55 1f       	adc	r21, r21
 87e:	f2 cf       	rjmp	.-28     	; 0x864 <__stack+0x5>
 880:	46 95       	lsr	r20
 882:	f1 df       	rcall	.-30     	; 0x866 <__fp_splitA>
 884:	08 c0       	rjmp	.+16     	; 0x896 <__fp_splitA+0x30>
 886:	16 16       	cp	r1, r22
 888:	17 06       	cpc	r1, r23
 88a:	18 06       	cpc	r1, r24
 88c:	99 1f       	adc	r25, r25
 88e:	f1 cf       	rjmp	.-30     	; 0x872 <__fp_splitA+0xc>
 890:	86 95       	lsr	r24
 892:	71 05       	cpc	r23, r1
 894:	61 05       	cpc	r22, r1
 896:	08 94       	sec
 898:	08 95       	ret

0000089a <__fp_zero>:
 89a:	e8 94       	clt

0000089c <__fp_szero>:
 89c:	bb 27       	eor	r27, r27
 89e:	66 27       	eor	r22, r22
 8a0:	77 27       	eor	r23, r23
 8a2:	cb 01       	movw	r24, r22
 8a4:	97 f9       	bld	r25, 7
 8a6:	08 95       	ret

000008a8 <__divmodhi4>:
 8a8:	97 fb       	bst	r25, 7
 8aa:	07 2e       	mov	r0, r23
 8ac:	16 f4       	brtc	.+4      	; 0x8b2 <__divmodhi4+0xa>
 8ae:	00 94       	com	r0
 8b0:	07 d0       	rcall	.+14     	; 0x8c0 <__divmodhi4_neg1>
 8b2:	77 fd       	sbrc	r23, 7
 8b4:	09 d0       	rcall	.+18     	; 0x8c8 <__divmodhi4_neg2>
 8b6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__udivmodhi4>
 8ba:	07 fc       	sbrc	r0, 7
 8bc:	05 d0       	rcall	.+10     	; 0x8c8 <__divmodhi4_neg2>
 8be:	3e f4       	brtc	.+14     	; 0x8ce <__divmodhi4_exit>

000008c0 <__divmodhi4_neg1>:
 8c0:	90 95       	com	r25
 8c2:	81 95       	neg	r24
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__divmodhi4_neg2>:
 8c8:	70 95       	com	r23
 8ca:	61 95       	neg	r22
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255

000008ce <__divmodhi4_exit>:
 8ce:	08 95       	ret

000008d0 <__tablejump2__>:
 8d0:	ee 0f       	add	r30, r30
 8d2:	ff 1f       	adc	r31, r31
 8d4:	05 90       	lpm	r0, Z+
 8d6:	f4 91       	lpm	r31, Z
 8d8:	e0 2d       	mov	r30, r0
 8da:	09 94       	ijmp

000008dc <__udivmodhi4>:
 8dc:	aa 1b       	sub	r26, r26
 8de:	bb 1b       	sub	r27, r27
 8e0:	51 e1       	ldi	r21, 0x11	; 17
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <__udivmodhi4_ep>

000008e4 <__udivmodhi4_loop>:
 8e4:	aa 1f       	adc	r26, r26
 8e6:	bb 1f       	adc	r27, r27
 8e8:	a6 17       	cp	r26, r22
 8ea:	b7 07       	cpc	r27, r23
 8ec:	10 f0       	brcs	.+4      	; 0x8f2 <__udivmodhi4_ep>
 8ee:	a6 1b       	sub	r26, r22
 8f0:	b7 0b       	sbc	r27, r23

000008f2 <__udivmodhi4_ep>:
 8f2:	88 1f       	adc	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	5a 95       	dec	r21
 8f8:	a9 f7       	brne	.-22     	; 0x8e4 <__udivmodhi4_loop>
 8fa:	80 95       	com	r24
 8fc:	90 95       	com	r25
 8fe:	bc 01       	movw	r22, r24
 900:	cd 01       	movw	r24, r26
 902:	08 95       	ret

00000904 <_exit>:
 904:	f8 94       	cli

00000906 <__stop_program>:
 906:	ff cf       	rjmp	.-2      	; 0x906 <__stop_program>
