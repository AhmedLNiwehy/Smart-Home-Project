
Smart_Home_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000422  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  00000422  00000496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011c8  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000827  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088b  00000000  00000000  0000209b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00002928  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ea  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000057f  00000000  00000000  00002fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003551  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	d7 01       	movw	r26, r14
  56:	44 01       	movw	r8, r8
  58:	db 01       	movw	r26, r22
  5a:	44 01       	movw	r8, r8
  5c:	44 01       	movw	r8, r8
  5e:	44 01       	movw	r8, r8
  60:	50 01       	movw	r10, r0
  62:	5f 01       	movw	r10, r30
  64:	6e 01       	movw	r12, r28
  66:	7d 01       	movw	r14, r26
  68:	8c 01       	movw	r16, r24
  6a:	9b 01       	movw	r18, r22
  6c:	aa 01       	movw	r20, r20
  6e:	44 01       	movw	r8, r8
  70:	44 01       	movw	r8, r8
  72:	44 01       	movw	r8, r8
  74:	44 01       	movw	r8, r8
  76:	44 01       	movw	r8, r8
  78:	44 01       	movw	r8, r8
  7a:	44 01       	movw	r8, r8
  7c:	44 01       	movw	r8, r8
  7e:	44 01       	movw	r8, r8
  80:	44 01       	movw	r8, r8
  82:	44 01       	movw	r8, r8
  84:	44 01       	movw	r8, r8
  86:	44 01       	movw	r8, r8
  88:	44 01       	movw	r8, r8
  8a:	44 01       	movw	r8, r8
  8c:	44 01       	movw	r8, r8
  8e:	44 01       	movw	r8, r8
  90:	44 01       	movw	r8, r8
  92:	44 01       	movw	r8, r8
  94:	44 01       	movw	r8, r8
  96:	44 01       	movw	r8, r8
  98:	44 01       	movw	r8, r8
  9a:	44 01       	movw	r8, r8
  9c:	44 01       	movw	r8, r8
  9e:	44 01       	movw	r8, r8
  a0:	44 01       	movw	r8, r8
  a2:	44 01       	movw	r8, r8
  a4:	44 01       	movw	r8, r8
  a6:	44 01       	movw	r8, r8
  a8:	44 01       	movw	r8, r8
  aa:	44 01       	movw	r8, r8
  ac:	44 01       	movw	r8, r8
  ae:	44 01       	movw	r8, r8
  b0:	44 01       	movw	r8, r8
  b2:	44 01       	movw	r8, r8
  b4:	44 01       	movw	r8, r8
  b6:	44 01       	movw	r8, r8
  b8:	44 01       	movw	r8, r8
  ba:	44 01       	movw	r8, r8
  bc:	44 01       	movw	r8, r8
  be:	44 01       	movw	r8, r8
  c0:	44 01       	movw	r8, r8
  c2:	44 01       	movw	r8, r8
  c4:	44 01       	movw	r8, r8
  c6:	44 01       	movw	r8, r8
  c8:	c8 01       	movw	r24, r16
  ca:	44 01       	movw	r8, r8
  cc:	44 01       	movw	r8, r8
  ce:	44 01       	movw	r8, r8
  d0:	44 01       	movw	r8, r8
  d2:	44 01       	movw	r8, r8
  d4:	44 01       	movw	r8, r8
  d6:	44 01       	movw	r8, r8
  d8:	44 01       	movw	r8, r8
  da:	44 01       	movw	r8, r8
  dc:	44 01       	movw	r8, r8
  de:	44 01       	movw	r8, r8
  e0:	44 01       	movw	r8, r8
  e2:	44 01       	movw	r8, r8
  e4:	b9 01       	movw	r22, r18

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf e5       	ldi	r28, 0x5F	; 95
  ec:	d8 e0       	ldi	r29, 0x08	; 8
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
  f2:	11 e0       	ldi	r17, 0x01	; 1
  f4:	a0 e6       	ldi	r26, 0x60	; 96
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e2 e2       	ldi	r30, 0x22	; 34
  fa:	f4 e0       	ldi	r31, 0x04	; 4
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
  fe:	05 90       	lpm	r0, Z+
 100:	0d 92       	st	X+, r0
 102:	aa 30       	cpi	r26, 0x0A	; 10
 104:	b1 07       	cpc	r27, r17
 106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>
 108:	0e 94 2c 01 	call	0x258	; 0x258 <main>
 10c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <LCD_Command>:
#include "LCD.h"

void LCD_Command(uint8 cmd)
{
	/* SEND HIGH NIBBLE TO (D4-D7) */
	LCD_PRT = (LCD_PRT & 0x0F) | (cmd & 0xF0);
 114:	92 b3       	in	r25, 0x12	; 18
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	28 2f       	mov	r18, r24
 11a:	20 7f       	andi	r18, 0xF0	; 240
 11c:	92 2b       	or	r25, r18
 11e:	92 bb       	out	0x12, r25	; 18
	LCD_PRT &=~ (1<<LCD_RS);
 120:	92 98       	cbi	0x12, 2	; 18
	LCD_PRT |= (1<<LCD_EN);
 122:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	35 e0       	ldi	r19, 0x05	; 5
 126:	3a 95       	dec	r19
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Command+0x12>
 12a:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 12c:	93 98       	cbi	0x12, 3	; 18
 12e:	ef e8       	ldi	r30, 0x8F	; 143
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Command+0x1e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Command+0x24>
 138:	00 00       	nop
	_delay_us(100);
	
	/* SEND LOW NIBBLE TO (D4-D7) */
	LCD_PRT = (LCD_PRT & 0x0F) | (cmd<<4);
 13a:	22 b3       	in	r18, 0x12	; 18
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	f0 e1       	ldi	r31, 0x10	; 16
 140:	8f 9f       	mul	r24, r31
 142:	c0 01       	movw	r24, r0
 144:	11 24       	eor	r1, r1
 146:	82 2b       	or	r24, r18
 148:	82 bb       	out	0x12, r24	; 18
	LCD_PRT |= (1<<LCD_EN);
 14a:	93 9a       	sbi	0x12, 3	; 18
 14c:	35 e0       	ldi	r19, 0x05	; 5
 14e:	3a 95       	dec	r19
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_Command+0x3a>
 152:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 154:	93 98       	cbi	0x12, 3	; 18
 156:	8f e8       	ldi	r24, 0x8F	; 143
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Command+0x46>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Command+0x4c>
 160:	00 00       	nop
 162:	08 95       	ret

00000164 <LCD_Init>:
	_delay_us(100);
}

void LCD_Init()
{
	LCD_DDR |= (1<<LCD_RS) | (1<<LCD_EN);
 164:	81 b3       	in	r24, 0x11	; 17
 166:	8c 60       	ori	r24, 0x0C	; 12
 168:	81 bb       	out	0x11, r24	; 17
	LCD_DDR |= 0xF0;
 16a:	81 b3       	in	r24, 0x11	; 17
 16c:	80 6f       	ori	r24, 0xF0	; 240
 16e:	81 bb       	out	0x11, r24	; 17
	LCD_PRT &=~ (1<<LCD_EN);
 170:	93 98       	cbi	0x12, 3	; 18
 172:	8f e3       	ldi	r24, 0x3F	; 63
 174:	9f e1       	ldi	r25, 0x1F	; 31
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_Init+0x12>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_Init+0x18>
 17c:	00 00       	nop
	_delay_us(2000);
	LCD_Command(FOUR_BIT_MODE);			          //Init command
 17e:	82 e3       	ldi	r24, 0x32	; 50
 180:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
	LCD_Command(TWO_LINE_LCD_FOUR_BIT_MODE);      //Init LCD. 2 line, 5 x 7 matrix 4 bit mode (D4-D7)
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
	LCD_Command(CURSOR_BLINKING_OFF);             //Display on, Cursor off
 18a:	8c e0       	ldi	r24, 0x0C	; 12
 18c:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
	LCD_Command(CLEAR);                           //Clear LCD
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
 196:	8f e3       	ldi	r24, 0x3F	; 63
 198:	9f e1       	ldi	r25, 0x1F	; 31
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_Init+0x36>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_Init+0x3c>
 1a0:	00 00       	nop
 1a2:	08 95       	ret

000001a4 <LCD_DisplayChar>:
}

void LCD_DisplayChar(uint8 data)
{
	//Send high nibble to (D4-D7)
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
 1a4:	92 b3       	in	r25, 0x12	; 18
 1a6:	9f 70       	andi	r25, 0x0F	; 15
 1a8:	28 2f       	mov	r18, r24
 1aa:	20 7f       	andi	r18, 0xF0	; 240
 1ac:	92 2b       	or	r25, r18
 1ae:	92 bb       	out	0x12, r25	; 18
	LCD_PRT |= (1<<LCD_RS);
 1b0:	92 9a       	sbi	0x12, 2	; 18
	LCD_PRT |= (1<<LCD_EN);
 1b2:	93 9a       	sbi	0x12, 3	; 18
 1b4:	35 e0       	ldi	r19, 0x05	; 5
 1b6:	3a 95       	dec	r19
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_DisplayChar+0x12>
 1ba:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 1bc:	93 98       	cbi	0x12, 3	; 18
 1be:	ef e8       	ldi	r30, 0x8F	; 143
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_DisplayChar+0x1e>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_DisplayChar+0x24>
 1c8:	00 00       	nop
	_delay_us(100);
	
	//Send low nibble to (D4-D7)
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
 1ca:	22 b3       	in	r18, 0x12	; 18
 1cc:	2f 70       	andi	r18, 0x0F	; 15
 1ce:	f0 e1       	ldi	r31, 0x10	; 16
 1d0:	8f 9f       	mul	r24, r31
 1d2:	c0 01       	movw	r24, r0
 1d4:	11 24       	eor	r1, r1
 1d6:	82 2b       	or	r24, r18
 1d8:	82 bb       	out	0x12, r24	; 18
	LCD_PRT |= (1<<LCD_EN);
 1da:	93 9a       	sbi	0x12, 3	; 18
 1dc:	35 e0       	ldi	r19, 0x05	; 5
 1de:	3a 95       	dec	r19
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_DisplayChar+0x3a>
 1e2:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 1e4:	93 98       	cbi	0x12, 3	; 18
 1e6:	8f e8       	ldi	r24, 0x8F	; 143
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_DisplayChar+0x46>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_DisplayChar+0x4c>
 1f0:	00 00       	nop
 1f2:	08 95       	ret

000001f4 <LCD_DisplayString>:
	_delay_us(100);
}

void LCD_DisplayString(sint8 *str)
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	fc 01       	movw	r30, r24
	uint8 i=0;
	
	while(str[i] != 0)
 1fc:	80 81       	ld	r24, Z
 1fe:	88 23       	and	r24, r24
 200:	59 f0       	breq	.+22     	; 0x218 <LCD_DisplayString+0x24>
 202:	8f 01       	movw	r16, r30
 204:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_DisplayChar(str[i]);
 206:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_DisplayChar>
		i++;
 20a:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_DisplayString(sint8 *str)
{
	uint8 i=0;
	
	while(str[i] != 0)
 20c:	f8 01       	movw	r30, r16
 20e:	ec 0f       	add	r30, r28
 210:	f1 1d       	adc	r31, r1
 212:	80 81       	ld	r24, Z
 214:	81 11       	cpse	r24, r1
 216:	f7 cf       	rjmp	.-18     	; 0x206 <LCD_DisplayString+0x12>
	{
		LCD_DisplayChar(str[i]);
		i++;
	}
}
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <LCD_Gotoxy>:

void LCD_Gotoxy(uint8 x, uint8 y)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	00 d0       	rcall	.+0      	; 0x226 <LCD_Gotoxy+0x6>
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
	uint8 firstCharAdd[] = {0x80,0xC0};
 22a:	90 e8       	ldi	r25, 0x80	; 128
 22c:	99 83       	std	Y+1, r25	; 0x01
 22e:	90 ec       	ldi	r25, 0xC0	; 192
 230:	9a 83       	std	Y+2, r25	; 0x02
	LCD_Command(firstCharAdd[y-1] + x-1);
 232:	fe 01       	movw	r30, r28
 234:	e6 0f       	add	r30, r22
 236:	f1 1d       	adc	r31, r1
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	90 81       	ld	r25, Z
 23c:	89 0f       	add	r24, r25
 23e:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
 242:	8f e8       	ldi	r24, 0x8F	; 143
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_Gotoxy+0x26>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_Gotoxy+0x2c>
 24c:	00 00       	nop
	_delay_us(100);
}
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <main>:
#include "LCD.h"


int main(void)
{
	LCD_Init();
 258:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_Init>
	SPI_Init('M');
 25c:	8d e4       	ldi	r24, 0x4D	; 77
 25e:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_Init>
	SLAVE_EN();
 262:	c4 98       	cbi	0x18, 4	; 24
	Uart_Init();
 264:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Uart_Init>
	
	LCD_Gotoxy(1,1);
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Gotoxy>
	LCD_DisplayString("Ahmed Mahmoud ");
 270:	80 e6       	ldi	r24, 0x60	; 96
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayString>
	LCD_Gotoxy(1,2);
 278:	62 e0       	ldi	r22, 0x02	; 2
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Gotoxy>
	LCD_DisplayString("Smart Home Project");
 280:	8f e6       	ldi	r24, 0x6F	; 111
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayString>
	
	while (1)
	{
		switch(Uart_Receive())
 288:	0e 94 05 02 	call	0x40a	; 0x40a <Uart_Receive>
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	bb 97       	sbiw	r30, 0x2b	; 43
 292:	e9 34       	cpi	r30, 0x49	; 73
 294:	f1 05       	cpc	r31, r1
 296:	c0 f7       	brcc	.-16     	; 0x288 <main+0x30>
 298:	e6 5d       	subi	r30, 0xD6	; 214
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	0c 94 09 02 	jmp	0x412	; 0x412 <__tablejump2__>
		{
			case '1':
			SPI_Write('1');
 2a0:	81 e3       	ldi	r24, 0x31	; 49
 2a2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SPI_Write>
			LCD_Command(CLEAR);
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
			LCD_Gotoxy(2,1);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Gotoxy>
			LCD_DisplayString(" ROOM1 IS ON");
 2b4:	82 e8       	ldi	r24, 0x82	; 130
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayString>
			break;
 2bc:	e5 cf       	rjmp	.-54     	; 0x288 <main+0x30>
			case '2':
			SPI_Write('2');
 2be:	82 e3       	ldi	r24, 0x32	; 50
 2c0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SPI_Write>
			LCD_Gotoxy(2,1);
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
			LCD_DisplayString(" ROOM1 IS OFF");
 2d2:	8f e8       	ldi	r24, 0x8F	; 143
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayString>
			break;
 2da:	d6 cf       	rjmp	.-84     	; 0x288 <main+0x30>
			case '3':
			SPI_Write('3');
 2dc:	83 e3       	ldi	r24, 0x33	; 51
 2de:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SPI_Write>
			LCD_Gotoxy(2,1);
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
			LCD_DisplayString(" ROOM2 IS ON");
 2f0:	8d e9       	ldi	r24, 0x9D	; 157
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayString>
			break;
 2f8:	c7 cf       	rjmp	.-114    	; 0x288 <main+0x30>
			case '4':
			SPI_Write('4');
 2fa:	84 e3       	ldi	r24, 0x34	; 52
 2fc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SPI_Write>
			LCD_Gotoxy(2,1);
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
			LCD_DisplayString(" ROOM2 IS OFF");
 30e:	8a ea       	ldi	r24, 0xAA	; 170
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayString>
			break;
 316:	b8 cf       	rjmp	.-144    	; 0x288 <main+0x30>
			case '5':
			SPI_TxRx('5');
 318:	85 e3       	ldi	r24, 0x35	; 53
 31a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_TxRx>
			LCD_Gotoxy(2,1);
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
			LCD_DisplayString(" ROOM3 IS ON");
 32c:	88 eb       	ldi	r24, 0xB8	; 184
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayString>
			break;
 334:	a9 cf       	rjmp	.-174    	; 0x288 <main+0x30>
			case '6':
			SPI_Write('6');
 336:	86 e3       	ldi	r24, 0x36	; 54
 338:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SPI_Write>
			LCD_Gotoxy(2,1);
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
			LCD_DisplayString(" ROOM3 IS OFF");
 34a:	85 ec       	ldi	r24, 0xC5	; 197
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayString>
			break;
 352:	9a cf       	rjmp	.-204    	; 0x288 <main+0x30>
			case '7':
			SPI_Write('7');
 354:	87 e3       	ldi	r24, 0x37	; 55
 356:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SPI_Write>
			LCD_Gotoxy(2,1);
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
			LCD_DisplayString(" Receiving Temperature: ");
 368:	83 ed       	ldi	r24, 0xD3	; 211
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayString>
			break;
 370:	8b cf       	rjmp	.-234    	; 0x288 <main+0x30>
			
			case 's':
			SPI_Write('s');
 372:	83 e7       	ldi	r24, 0x73	; 115
 374:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SPI_Write>
			LCD_Gotoxy(2,1);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
			LCD_DisplayString(" Motor is ON ");
 386:	8c ee       	ldi	r24, 0xEC	; 236
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayString>
			break;
 38e:	7c cf       	rjmp	.-264    	; 0x288 <main+0x30>
			case 'e':
			SPI_Write('e');
 390:	85 e6       	ldi	r24, 0x65	; 101
 392:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SPI_Write>
			LCD_Gotoxy(2,1);
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Command>
			LCD_DisplayString(" Motor is OFF ");
 3a4:	8a ef       	ldi	r24, 0xFA	; 250
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayString>
			break;
 3ac:	6d cf       	rjmp	.-294    	; 0x288 <main+0x30>
			case '+':
			SPI_Write('+');
 3ae:	8b e2       	ldi	r24, 0x2B	; 43
 3b0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SPI_Write>
			break;
 3b4:	69 cf       	rjmp	.-302    	; 0x288 <main+0x30>
			case '-':
			SPI_Write('-');
 3b6:	8d e2       	ldi	r24, 0x2D	; 45
 3b8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SPI_Write>
			break;
 3bc:	65 cf       	rjmp	.-310    	; 0x288 <main+0x30>

000003be <SPI_Init>:

#include "SPI.h"

void SPI_Init(unsigned char status)
{
	switch(status)
 3be:	8d 34       	cpi	r24, 0x4D	; 77
 3c0:	19 f0       	breq	.+6      	; 0x3c8 <SPI_Init+0xa>
 3c2:	83 35       	cpi	r24, 0x53	; 83
 3c4:	51 f0       	breq	.+20     	; 0x3da <SPI_Init+0x1c>
 3c6:	08 95       	ret
	{
		case 'M':
		SPI_DDR |= (1<<MOSI) | (1<<SCK) | (1<<SS);	
 3c8:	87 b3       	in	r24, 0x17	; 23
 3ca:	80 6b       	ori	r24, 0xB0	; 176
 3cc:	87 bb       	out	0x17, r24	; 23
		SPI_DDR &=~ (1<<MISO);
 3ce:	be 98       	cbi	0x17, 6	; 23
		SPCR |= (1<<MSTR) | (1<<SPE);
 3d0:	8d b1       	in	r24, 0x0d	; 13
 3d2:	80 65       	ori	r24, 0x50	; 80
 3d4:	8d b9       	out	0x0d, r24	; 13
		SLAVE_DISEN();
 3d6:	c4 9a       	sbi	0x18, 4	; 24
		break;
 3d8:	08 95       	ret
		
		case 'S':
		SPI_DDR &=~ (1<<MOSI) | (1<<SCK) | (1<<SS);
 3da:	bd 98       	cbi	0x17, 5	; 23
		SPI_DDR |= (1<<MISO);
 3dc:	be 9a       	sbi	0x17, 6	; 23
		SPCR |= (1<<SPE);
 3de:	6e 9a       	sbi	0x0d, 6	; 13
 3e0:	08 95       	ret

000003e2 <SPI_TxRx>:
	}
	
}
unsigned char SPI_TxRx(unsigned char data)
{
	SPDR = data;
 3e2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));   //waiting for reading data
 3e4:	77 9b       	sbis	0x0e, 7	; 14
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <SPI_TxRx+0x2>
	return SPDR;	
 3e8:	8f b1       	in	r24, 0x0f	; 15
}
 3ea:	08 95       	ret

000003ec <SPI_Write>:

void SPI_Write(char data)		/* SPI write data function */
{
	char flush_buffer;
	SPDR = data;			    /* Write data to SPI data register */
 3ec:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
 3ee:	77 9b       	sbis	0x0e, 7	; 14
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <SPI_Write+0x2>
	flush_buffer = SPDR;		/* Flush received data */
 3f2:	8f b1       	in	r24, 0x0f	; 15
 3f4:	08 95       	ret

000003f6 <Uart_Init>:
}

void Uart_Send(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)));
	UDR = data;	
 3f6:	8a b1       	in	r24, 0x0a	; 10
 3f8:	88 61       	ori	r24, 0x18	; 24
 3fa:	8a b9       	out	0x0a, r24	; 10
 3fc:	80 b5       	in	r24, 0x20	; 32
 3fe:	86 68       	ori	r24, 0x86	; 134
 400:	80 bd       	out	0x20, r24	; 32
 402:	87 e6       	ldi	r24, 0x67	; 103
 404:	89 b9       	out	0x09, r24	; 9
 406:	10 bc       	out	0x20, r1	; 32
 408:	08 95       	ret

0000040a <Uart_Receive>:
}

unsigned char Uart_Receive()
{
	while(!(UCSRA & (1<<RXC)));
 40a:	5f 9b       	sbis	0x0b, 7	; 11
 40c:	fe cf       	rjmp	.-4      	; 0x40a <Uart_Receive>
	return UDR;
 40e:	8c b1       	in	r24, 0x0c	; 12
}
 410:	08 95       	ret

00000412 <__tablejump2__>:
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	05 90       	lpm	r0, Z+
 418:	f4 91       	lpm	r31, Z
 41a:	e0 2d       	mov	r30, r0
 41c:	09 94       	ijmp

0000041e <_exit>:
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>
